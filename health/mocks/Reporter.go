// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	health "github.com/Setheck/gu/health"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Reporter is an autogenerated mock type for the Reporter type
type Reporter struct {
	mock.Mock
}

// AddHostnameSuffix provides a mock function with given fields: _a0
func (_m *Reporter) AddHostnameSuffix(_a0 string) {
	_m.Called(_a0)
}

// AddStat provides a mock function with given fields: key, val
func (_m *Reporter) AddStat(key string, val interface{}) {
	_m.Called(key, val)
}

// ClearAll provides a mock function with given fields:
func (_m *Reporter) ClearAll() {
	_m.Called()
}

// ClearStat provides a mock function with given fields: key
func (_m *Reporter) ClearStat(key string) {
	_m.Called(key)
}

// ClearStatFns provides a mock function with given fields:
func (_m *Reporter) ClearStatFns() {
	_m.Called()
}

// ClearStats provides a mock function with given fields:
func (_m *Reporter) ClearStats() {
	_m.Called()
}

// GetStat provides a mock function with given fields: key
func (_m *Reporter) GetStat(key string) interface{} {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Health provides a mock function with given fields:
func (_m *Reporter) Health() health.Event {
	ret := _m.Called()

	var r0 health.Event
	if rf, ok := ret.Get(0).(func() health.Event); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(health.Event)
	}

	return r0
}

// HealthHandler provides a mock function with given fields: w, req
func (_m *Reporter) HealthHandler(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// Initialize provides a mock function with given fields:
func (_m *Reporter) Initialize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PersistStat provides a mock function with given fields: key, val
func (_m *Reporter) PersistStat(key string, val interface{}) {
	_m.Called(key, val)
}

// RegisterStatFn provides a mock function with given fields: name, fn
func (_m *Reporter) RegisterStatFn(name string, fn func(health.Reporter)) {
	_m.Called(name, fn)
}

// ReportHealth provides a mock function with given fields:
func (_m *Reporter) ReportHealth() {
	_m.Called()
}

// SetErrFn provides a mock function with given fields: efn
func (_m *Reporter) SetErrFn(efn func(error)) {
	_m.Called(efn)
}

// SetHealth provides a mock function with given fields: state, message
func (_m *Reporter) SetHealth(state health.State, message string) {
	_m.Called(state, message)
}

// SetStdOutFallback provides a mock function with given fields: b
func (_m *Reporter) SetStdOutFallback(b bool) {
	_m.Called(b)
}

// StartIntervalReporting provides a mock function with given fields: interval
func (_m *Reporter) StartIntervalReporting(interval time.Duration) {
	_m.Called(interval)
}

// Stop provides a mock function with given fields:
func (_m *Reporter) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopWithFinalState provides a mock function with given fields: final, msg
func (_m *Reporter) StopWithFinalState(final health.State, msg string) error {
	ret := _m.Called(final, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(health.State, string) error); ok {
		r0 = rf(final, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
